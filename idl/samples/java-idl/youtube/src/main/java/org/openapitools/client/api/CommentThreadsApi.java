/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommentThreadListResponse;
import org.openapitools.client.DependencyUtil;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommentThreadsApi {
    private ApiClient localVarApiClient;

    public CommentThreadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommentThreadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for youtubeCommentThreadsList
     * @param part The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include. (required)
     * @param allThreadsRelatedToChannelId Returns the comment threads of all videos of the channel and the channel comments as well. (optional)
     * @param channelId Returns the comment threads for all the channel comments (ie does not include comments left on videos). (optional)
     * @param id Returns the comment threads with the given IDs for Stubby or Apiary. (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param moderationStatus Limits the returned comment threads to those with the specified moderation status. Not compatible with the &#39;id&#39; filter. Valid values: published, heldForReview, likelySpam. (optional)
     * @param order  (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param searchTerms Limits the returned comment threads to those matching the specified key words. Not compatible with the &#39;id&#39; filter. (optional)
     * @param textFormat The requested text format for the returned comments. (optional)
     * @param videoId Returns the comment threads of the specified video. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeCommentThreadsListCall(List<String> part, String allThreadsRelatedToChannelId, String channelId, List<String> id, Integer maxResults, String moderationStatus, String order, String pageToken, String searchTerms, String textFormat, String videoId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/youtube/v3/commentThreads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (part != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "part", part));
        }

        if (allThreadsRelatedToChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allThreadsRelatedToChannelId", allThreadsRelatedToChannelId));
        }

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelId", channelId));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (moderationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moderationStatus", moderationStatus));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (searchTerms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerms", searchTerms));
        }

        if (textFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textFormat", textFormat));
        }

        if (videoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoId", videoId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Oauth2", "Oauth2c" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeCommentThreadsListValidateBeforeCall(List<String> part, String allThreadsRelatedToChannelId, String channelId, List<String> id, Integer maxResults, String moderationStatus, String order, String pageToken, String searchTerms, String textFormat, String videoId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'part' is set
        if (part == null) {
            throw new ApiException("Missing the required parameter 'part' when calling youtubeCommentThreadsList(Async)");
        }
        
        // Check dependency: OnlyOne(allThreadsRelatedToChannelId, channelId, id, videoId);
        if(DependencyUtil.doNotSatisfyOnlyOneDependency((allThreadsRelatedToChannelId != null),(channelId != null),(id != null && !id.isEmpty()),(videoId != null))){
            throw new ApiException("Dependency not satisfied: OnlyOne(allThreadsRelatedToChannelId, channelId, id, videoId);");
        }
        // Check dependency: ZeroOrOne(id, maxResults);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((id != null && !id.isEmpty()),(maxResults != null))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(id, maxResults);");
        }
        // Check dependency: ZeroOrOne(id, moderationStatus);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((id != null && !id.isEmpty()),(moderationStatus != null))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(id, moderationStatus);");
        }
        // Check dependency: ZeroOrOne(id, order);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((id != null && !id.isEmpty()),(order != null))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(id, order);");
        }
        // Check dependency: ZeroOrOne(id, pageToken);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((id != null && !id.isEmpty()),(pageToken != null))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(id, pageToken);");
        }
        // Check dependency: ZeroOrOne(id, searchTerms);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((id != null && !id.isEmpty()),(searchTerms != null))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(id, searchTerms);");
        }

        okhttp3.Call localVarCall = youtubeCommentThreadsListCall(part, allThreadsRelatedToChannelId, channelId, id, maxResults, moderationStatus, order, pageToken, searchTerms, textFormat, videoId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a list of resources, possibly filtered.
     * @param part The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include. (required)
     * @param allThreadsRelatedToChannelId Returns the comment threads of all videos of the channel and the channel comments as well. (optional)
     * @param channelId Returns the comment threads for all the channel comments (ie does not include comments left on videos). (optional)
     * @param id Returns the comment threads with the given IDs for Stubby or Apiary. (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param moderationStatus Limits the returned comment threads to those with the specified moderation status. Not compatible with the &#39;id&#39; filter. Valid values: published, heldForReview, likelySpam. (optional)
     * @param order  (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param searchTerms Limits the returned comment threads to those matching the specified key words. Not compatible with the &#39;id&#39; filter. (optional)
     * @param textFormat The requested text format for the returned comments. (optional)
     * @param videoId Returns the comment threads of the specified video. (optional)
     * @return CommentThreadListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public CommentThreadListResponse youtubeCommentThreadsList(List<String> part, String allThreadsRelatedToChannelId, String channelId, List<String> id, Integer maxResults, String moderationStatus, String order, String pageToken, String searchTerms, String textFormat, String videoId) throws ApiException {
        ApiResponse<CommentThreadListResponse> localVarResp = youtubeCommentThreadsListWithHttpInfo(part, allThreadsRelatedToChannelId, channelId, id, maxResults, moderationStatus, order, pageToken, searchTerms, textFormat, videoId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of resources, possibly filtered.
     * @param part The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include. (required)
     * @param allThreadsRelatedToChannelId Returns the comment threads of all videos of the channel and the channel comments as well. (optional)
     * @param channelId Returns the comment threads for all the channel comments (ie does not include comments left on videos). (optional)
     * @param id Returns the comment threads with the given IDs for Stubby or Apiary. (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param moderationStatus Limits the returned comment threads to those with the specified moderation status. Not compatible with the &#39;id&#39; filter. Valid values: published, heldForReview, likelySpam. (optional)
     * @param order  (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param searchTerms Limits the returned comment threads to those matching the specified key words. Not compatible with the &#39;id&#39; filter. (optional)
     * @param textFormat The requested text format for the returned comments. (optional)
     * @param videoId Returns the comment threads of the specified video. (optional)
     * @return ApiResponse&lt;CommentThreadListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentThreadListResponse> youtubeCommentThreadsListWithHttpInfo(List<String> part, String allThreadsRelatedToChannelId, String channelId, List<String> id, Integer maxResults, String moderationStatus, String order, String pageToken, String searchTerms, String textFormat, String videoId) throws ApiException {
        okhttp3.Call localVarCall = youtubeCommentThreadsListValidateBeforeCall(part, allThreadsRelatedToChannelId, channelId, id, maxResults, moderationStatus, order, pageToken, searchTerms, textFormat, videoId, null);
        Type localVarReturnType = new TypeToken<CommentThreadListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of resources, possibly filtered.
     * @param part The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include. (required)
     * @param allThreadsRelatedToChannelId Returns the comment threads of all videos of the channel and the channel comments as well. (optional)
     * @param channelId Returns the comment threads for all the channel comments (ie does not include comments left on videos). (optional)
     * @param id Returns the comment threads with the given IDs for Stubby or Apiary. (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param moderationStatus Limits the returned comment threads to those with the specified moderation status. Not compatible with the &#39;id&#39; filter. Valid values: published, heldForReview, likelySpam. (optional)
     * @param order  (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param searchTerms Limits the returned comment threads to those matching the specified key words. Not compatible with the &#39;id&#39; filter. (optional)
     * @param textFormat The requested text format for the returned comments. (optional)
     * @param videoId Returns the comment threads of the specified video. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeCommentThreadsListAsync(List<String> part, String allThreadsRelatedToChannelId, String channelId, List<String> id, Integer maxResults, String moderationStatus, String order, String pageToken, String searchTerms, String textFormat, String videoId, final ApiCallback<CommentThreadListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeCommentThreadsListValidateBeforeCall(part, allThreadsRelatedToChannelId, channelId, id, maxResults, moderationStatus, order, pageToken, searchTerms, textFormat, videoId, _callback);
        Type localVarReturnType = new TypeToken<CommentThreadListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

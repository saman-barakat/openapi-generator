/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Basic details about a video category, such as its localized title. Next Id: 17
 */
@ApiModel(description = "Basic details about a video category, such as its localized title. Next Id: 17")
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class VideoStatus {
  public static final String SERIALIZED_NAME_EMBEDDABLE = "embeddable";
  @SerializedName(SERIALIZED_NAME_EMBEDDABLE)
  private Boolean embeddable;

  /**
   * This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
   */
  @JsonAdapter(FailureReasonEnum.Adapter.class)
  public enum FailureReasonEnum {
    CONVERSION("conversion"),
    
    INVALIDFILE("invalidFile"),
    
    EMPTYFILE("emptyFile"),
    
    TOOSMALL("tooSmall"),
    
    CODEC("codec"),
    
    UPLOADABORTED("uploadAborted");

    private String value;

    FailureReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureReasonEnum fromValue(String value) {
      for (FailureReasonEnum b : FailureReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReasonEnum failureReason;

  /**
   * The video&#39;s license. @mutable youtube.videos.insert youtube.videos.update
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
  public enum LicenseEnum {
    YOUTUBE("youtube"),
    
    CREATIVECOMMON("creativeCommon");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  public static final String SERIALIZED_NAME_MADE_FOR_KIDS = "madeForKids";
  @SerializedName(SERIALIZED_NAME_MADE_FOR_KIDS)
  private Boolean madeForKids;

  /**
   * The video&#39;s privacy status.
   */
  @JsonAdapter(PrivacyStatusEnum.Adapter.class)
  public enum PrivacyStatusEnum {
    PUBLIC("public"),
    
    UNLISTED("unlisted"),
    
    PRIVATE("private");

    private String value;

    PrivacyStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyStatusEnum fromValue(String value) {
      for (PrivacyStatusEnum b : PrivacyStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY_STATUS = "privacyStatus";
  @SerializedName(SERIALIZED_NAME_PRIVACY_STATUS)
  private PrivacyStatusEnum privacyStatus;

  public static final String SERIALIZED_NAME_PUBLIC_STATS_VIEWABLE = "publicStatsViewable";
  @SerializedName(SERIALIZED_NAME_PUBLIC_STATS_VIEWABLE)
  private Boolean publicStatsViewable;

  public static final String SERIALIZED_NAME_PUBLISH_AT = "publishAt";
  @SerializedName(SERIALIZED_NAME_PUBLISH_AT)
  private OffsetDateTime publishAt;

  /**
   * This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
   */
  @JsonAdapter(RejectionReasonEnum.Adapter.class)
  public enum RejectionReasonEnum {
    COPYRIGHT("copyright"),
    
    INAPPROPRIATE("inappropriate"),
    
    DUPLICATE("duplicate"),
    
    TERMSOFUSE("termsOfUse"),
    
    UPLOADERACCOUNTSUSPENDED("uploaderAccountSuspended"),
    
    LENGTH("length"),
    
    CLAIM("claim"),
    
    UPLOADERACCOUNTCLOSED("uploaderAccountClosed"),
    
    TRADEMARK("trademark"),
    
    LEGAL("legal");

    private String value;

    RejectionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RejectionReasonEnum fromValue(String value) {
      for (RejectionReasonEnum b : RejectionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RejectionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RejectionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RejectionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RejectionReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REJECTION_REASON = "rejectionReason";
  @SerializedName(SERIALIZED_NAME_REJECTION_REASON)
  private RejectionReasonEnum rejectionReason;

  public static final String SERIALIZED_NAME_SELF_DECLARED_MADE_FOR_KIDS = "selfDeclaredMadeForKids";
  @SerializedName(SERIALIZED_NAME_SELF_DECLARED_MADE_FOR_KIDS)
  private Boolean selfDeclaredMadeForKids;

  /**
   * The status of the uploaded video.
   */
  @JsonAdapter(UploadStatusEnum.Adapter.class)
  public enum UploadStatusEnum {
    UPLOADED("uploaded"),
    
    PROCESSED("processed"),
    
    FAILED("failed"),
    
    REJECTED("rejected"),
    
    DELETED("deleted");

    private String value;

    UploadStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UploadStatusEnum fromValue(String value) {
      for (UploadStatusEnum b : UploadStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UploadStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UploadStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UploadStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UploadStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UPLOAD_STATUS = "uploadStatus";
  @SerializedName(SERIALIZED_NAME_UPLOAD_STATUS)
  private UploadStatusEnum uploadStatus;


  public VideoStatus embeddable(Boolean embeddable) {
    
    this.embeddable = embeddable;
    return this;
  }

   /**
   * This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
   * @return embeddable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update")

  public Boolean getEmbeddable() {
    return embeddable;
  }


  public void setEmbeddable(Boolean embeddable) {
    this.embeddable = embeddable;
  }


  public VideoStatus failureReason(FailureReasonEnum failureReason) {
    
    this.failureReason = failureReason;
    return this;
  }

   /**
   * This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
   * @return failureReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.")

  public FailureReasonEnum getFailureReason() {
    return failureReason;
  }


  public void setFailureReason(FailureReasonEnum failureReason) {
    this.failureReason = failureReason;
  }


  public VideoStatus license(LicenseEnum license) {
    
    this.license = license;
    return this;
  }

   /**
   * The video&#39;s license. @mutable youtube.videos.insert youtube.videos.update
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video's license. @mutable youtube.videos.insert youtube.videos.update")

  public LicenseEnum getLicense() {
    return license;
  }


  public void setLicense(LicenseEnum license) {
    this.license = license;
  }


  public VideoStatus madeForKids(Boolean madeForKids) {
    
    this.madeForKids = madeForKids;
    return this;
  }

   /**
   * Get madeForKids
   * @return madeForKids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMadeForKids() {
    return madeForKids;
  }


  public void setMadeForKids(Boolean madeForKids) {
    this.madeForKids = madeForKids;
  }


  public VideoStatus privacyStatus(PrivacyStatusEnum privacyStatus) {
    
    this.privacyStatus = privacyStatus;
    return this;
  }

   /**
   * The video&#39;s privacy status.
   * @return privacyStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The video's privacy status.")

  public PrivacyStatusEnum getPrivacyStatus() {
    return privacyStatus;
  }


  public void setPrivacyStatus(PrivacyStatusEnum privacyStatus) {
    this.privacyStatus = privacyStatus;
  }


  public VideoStatus publicStatsViewable(Boolean publicStatsViewable) {
    
    this.publicStatsViewable = publicStatsViewable;
    return this;
  }

   /**
   * This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
   * @return publicStatsViewable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update")

  public Boolean getPublicStatsViewable() {
    return publicStatsViewable;
  }


  public void setPublicStatsViewable(Boolean publicStatsViewable) {
    this.publicStatsViewable = publicStatsViewable;
  }


  public VideoStatus publishAt(OffsetDateTime publishAt) {
    
    this.publishAt = publishAt;
    return this;
  }

   /**
   * The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
   * @return publishAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..")

  public OffsetDateTime getPublishAt() {
    return publishAt;
  }


  public void setPublishAt(OffsetDateTime publishAt) {
    this.publishAt = publishAt;
  }


  public VideoStatus rejectionReason(RejectionReasonEnum rejectionReason) {
    
    this.rejectionReason = rejectionReason;
    return this;
  }

   /**
   * This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
   * @return rejectionReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.")

  public RejectionReasonEnum getRejectionReason() {
    return rejectionReason;
  }


  public void setRejectionReason(RejectionReasonEnum rejectionReason) {
    this.rejectionReason = rejectionReason;
  }


  public VideoStatus selfDeclaredMadeForKids(Boolean selfDeclaredMadeForKids) {
    
    this.selfDeclaredMadeForKids = selfDeclaredMadeForKids;
    return this;
  }

   /**
   * Get selfDeclaredMadeForKids
   * @return selfDeclaredMadeForKids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSelfDeclaredMadeForKids() {
    return selfDeclaredMadeForKids;
  }


  public void setSelfDeclaredMadeForKids(Boolean selfDeclaredMadeForKids) {
    this.selfDeclaredMadeForKids = selfDeclaredMadeForKids;
  }


  public VideoStatus uploadStatus(UploadStatusEnum uploadStatus) {
    
    this.uploadStatus = uploadStatus;
    return this;
  }

   /**
   * The status of the uploaded video.
   * @return uploadStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the uploaded video.")

  public UploadStatusEnum getUploadStatus() {
    return uploadStatus;
  }


  public void setUploadStatus(UploadStatusEnum uploadStatus) {
    this.uploadStatus = uploadStatus;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoStatus videoStatus = (VideoStatus) o;
    return Objects.equals(this.embeddable, videoStatus.embeddable) &&
        Objects.equals(this.failureReason, videoStatus.failureReason) &&
        Objects.equals(this.license, videoStatus.license) &&
        Objects.equals(this.madeForKids, videoStatus.madeForKids) &&
        Objects.equals(this.privacyStatus, videoStatus.privacyStatus) &&
        Objects.equals(this.publicStatsViewable, videoStatus.publicStatsViewable) &&
        Objects.equals(this.publishAt, videoStatus.publishAt) &&
        Objects.equals(this.rejectionReason, videoStatus.rejectionReason) &&
        Objects.equals(this.selfDeclaredMadeForKids, videoStatus.selfDeclaredMadeForKids) &&
        Objects.equals(this.uploadStatus, videoStatus.uploadStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embeddable, failureReason, license, madeForKids, privacyStatus, publicStatsViewable, publishAt, rejectionReason, selfDeclaredMadeForKids, uploadStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoStatus {\n");
    sb.append("    embeddable: ").append(toIndentedString(embeddable)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    madeForKids: ").append(toIndentedString(madeForKids)).append("\n");
    sb.append("    privacyStatus: ").append(toIndentedString(privacyStatus)).append("\n");
    sb.append("    publicStatsViewable: ").append(toIndentedString(publicStatsViewable)).append("\n");
    sb.append("    publishAt: ").append(toIndentedString(publishAt)).append("\n");
    sb.append("    rejectionReason: ").append(toIndentedString(rejectionReason)).append("\n");
    sb.append("    selfDeclaredMadeForKids: ").append(toIndentedString(selfDeclaredMadeForKids)).append("\n");
    sb.append("    uploadStatus: ").append(toIndentedString(uploadStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


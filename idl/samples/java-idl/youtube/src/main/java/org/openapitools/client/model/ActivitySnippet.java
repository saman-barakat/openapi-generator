/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ThumbnailDetails;
import org.threeten.bp.OffsetDateTime;

/**
 * Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
 */
@ApiModel(description = "Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12")
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class ActivitySnippet {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_TITLE = "channelTitle";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TITLE)
  private String channelTitle;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private ThumbnailDetails thumbnails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The type of activity that the resource describes.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPEUNSPECIFIED("typeUnspecified"),
    
    UPLOAD("upload"),
    
    LIKE("like"),
    
    FAVORITE("favorite"),
    
    COMMENT("comment"),
    
    SUBSCRIPTION("subscription"),
    
    PLAYLISTITEM("playlistItem"),
    
    RECOMMENDATION("recommendation"),
    
    BULLETIN("bulletin"),
    
    SOCIAL("social"),
    
    CHANNELITEM("channelItem"),
    
    PROMOTEDITEM("promotedItem");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  public ActivitySnippet channelId(String channelId) {
    
    this.channelId = channelId;
    return this;
  }

   /**
   * The ID that YouTube uses to uniquely identify the channel associated with the activity.
   * @return channelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID that YouTube uses to uniquely identify the channel associated with the activity.")

  public String getChannelId() {
    return channelId;
  }


  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public ActivitySnippet channelTitle(String channelTitle) {
    
    this.channelTitle = channelTitle;
    return this;
  }

   /**
   * Channel title for the channel responsible for this activity
   * @return channelTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel title for the channel responsible for this activity")

  public String getChannelTitle() {
    return channelTitle;
  }


  public void setChannelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
  }


  public ActivitySnippet description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the resource primarily associated with the activity. @mutable youtube.activities.insert")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ActivitySnippet groupId(String groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user&#39;s activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
   * @return groupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.")

  public String getGroupId() {
    return groupId;
  }


  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public ActivitySnippet publishedAt(OffsetDateTime publishedAt) {
    
    this.publishedAt = publishedAt;
    return this;
  }

   /**
   * The date and time that the video was uploaded.
   * @return publishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time that the video was uploaded.")

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }


  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public ActivitySnippet thumbnails(ThumbnailDetails thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThumbnailDetails getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
  }


  public ActivitySnippet title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The title of the resource primarily associated with the activity.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The title of the resource primarily associated with the activity.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ActivitySnippet type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of activity that the resource describes.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of activity that the resource describes.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivitySnippet activitySnippet = (ActivitySnippet) o;
    return Objects.equals(this.channelId, activitySnippet.channelId) &&
        Objects.equals(this.channelTitle, activitySnippet.channelTitle) &&
        Objects.equals(this.description, activitySnippet.description) &&
        Objects.equals(this.groupId, activitySnippet.groupId) &&
        Objects.equals(this.publishedAt, activitySnippet.publishedAt) &&
        Objects.equals(this.thumbnails, activitySnippet.thumbnails) &&
        Objects.equals(this.title, activitySnippet.title) &&
        Objects.equals(this.type, activitySnippet.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelTitle, description, groupId, publishedAt, thumbnails, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivitySnippet {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelTitle: ").append(toIndentedString(channelTitle)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


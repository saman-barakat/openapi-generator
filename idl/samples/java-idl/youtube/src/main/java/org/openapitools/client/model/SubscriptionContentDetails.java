/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Details about the content to witch a subscription refers.
 */
@ApiModel(description = "Details about the content to witch a subscription refers.")
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class SubscriptionContentDetails {
  /**
   * The type of activity this subscription is for (only uploads, everything).
   */
  @JsonAdapter(ActivityTypeEnum.Adapter.class)
  public enum ActivityTypeEnum {
    SUBSCRIPTIONACTIVITYTYPEUNSPECIFIED("subscriptionActivityTypeUnspecified"),
    
    ALL("all"),
    
    UPLOADS("uploads");

    private String value;

    ActivityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityTypeEnum fromValue(String value) {
      for (ActivityTypeEnum b : ActivityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private ActivityTypeEnum activityType;

  public static final String SERIALIZED_NAME_NEW_ITEM_COUNT = "newItemCount";
  @SerializedName(SERIALIZED_NAME_NEW_ITEM_COUNT)
  private Integer newItemCount;

  public static final String SERIALIZED_NAME_TOTAL_ITEM_COUNT = "totalItemCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEM_COUNT)
  private Integer totalItemCount;


  public SubscriptionContentDetails activityType(ActivityTypeEnum activityType) {
    
    this.activityType = activityType;
    return this;
  }

   /**
   * The type of activity this subscription is for (only uploads, everything).
   * @return activityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of activity this subscription is for (only uploads, everything).")

  public ActivityTypeEnum getActivityType() {
    return activityType;
  }


  public void setActivityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
  }


  public SubscriptionContentDetails newItemCount(Integer newItemCount) {
    
    this.newItemCount = newItemCount;
    return this;
  }

   /**
   * The number of new items in the subscription since its content was last read.
   * @return newItemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of new items in the subscription since its content was last read.")

  public Integer getNewItemCount() {
    return newItemCount;
  }


  public void setNewItemCount(Integer newItemCount) {
    this.newItemCount = newItemCount;
  }


  public SubscriptionContentDetails totalItemCount(Integer totalItemCount) {
    
    this.totalItemCount = totalItemCount;
    return this;
  }

   /**
   * The approximate number of items that the subscription points to.
   * @return totalItemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The approximate number of items that the subscription points to.")

  public Integer getTotalItemCount() {
    return totalItemCount;
  }


  public void setTotalItemCount(Integer totalItemCount) {
    this.totalItemCount = totalItemCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionContentDetails subscriptionContentDetails = (SubscriptionContentDetails) o;
    return Objects.equals(this.activityType, subscriptionContentDetails.activityType) &&
        Objects.equals(this.newItemCount, subscriptionContentDetails.newItemCount) &&
        Objects.equals(this.totalItemCount, subscriptionContentDetails.totalItemCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, newItemCount, totalItemCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionContentDetails {\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    newItemCount: ").append(toIndentedString(newItemCount)).append("\n");
    sb.append("    totalItemCount: ").append(toIndentedString(totalItemCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Statistics about a channel: number of subscribers, number of videos in the channel, etc.
 */
@ApiModel(description = "Statistics about a channel: number of subscribers, number of videos in the channel, etc.")
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class ChannelStatistics {
  public static final String SERIALIZED_NAME_COMMENT_COUNT = "commentCount";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private String commentCount;

  public static final String SERIALIZED_NAME_HIDDEN_SUBSCRIBER_COUNT = "hiddenSubscriberCount";
  @SerializedName(SERIALIZED_NAME_HIDDEN_SUBSCRIBER_COUNT)
  private Boolean hiddenSubscriberCount;

  public static final String SERIALIZED_NAME_SUBSCRIBER_COUNT = "subscriberCount";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_COUNT)
  private String subscriberCount;

  public static final String SERIALIZED_NAME_VIDEO_COUNT = "videoCount";
  @SerializedName(SERIALIZED_NAME_VIDEO_COUNT)
  private String videoCount;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private String viewCount;


  public ChannelStatistics commentCount(String commentCount) {
    
    this.commentCount = commentCount;
    return this;
  }

   /**
   * The number of comments for the channel.
   * @return commentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of comments for the channel.")

  public String getCommentCount() {
    return commentCount;
  }


  public void setCommentCount(String commentCount) {
    this.commentCount = commentCount;
  }


  public ChannelStatistics hiddenSubscriberCount(Boolean hiddenSubscriberCount) {
    
    this.hiddenSubscriberCount = hiddenSubscriberCount;
    return this;
  }

   /**
   * Whether or not the number of subscribers is shown for this user.
   * @return hiddenSubscriberCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the number of subscribers is shown for this user.")

  public Boolean getHiddenSubscriberCount() {
    return hiddenSubscriberCount;
  }


  public void setHiddenSubscriberCount(Boolean hiddenSubscriberCount) {
    this.hiddenSubscriberCount = hiddenSubscriberCount;
  }


  public ChannelStatistics subscriberCount(String subscriberCount) {
    
    this.subscriberCount = subscriberCount;
    return this;
  }

   /**
   * The number of subscribers that the channel has.
   * @return subscriberCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of subscribers that the channel has.")

  public String getSubscriberCount() {
    return subscriberCount;
  }


  public void setSubscriberCount(String subscriberCount) {
    this.subscriberCount = subscriberCount;
  }


  public ChannelStatistics videoCount(String videoCount) {
    
    this.videoCount = videoCount;
    return this;
  }

   /**
   * The number of videos uploaded to the channel.
   * @return videoCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of videos uploaded to the channel.")

  public String getVideoCount() {
    return videoCount;
  }


  public void setVideoCount(String videoCount) {
    this.videoCount = videoCount;
  }


  public ChannelStatistics viewCount(String viewCount) {
    
    this.viewCount = viewCount;
    return this;
  }

   /**
   * The number of times the channel has been viewed.
   * @return viewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of times the channel has been viewed.")

  public String getViewCount() {
    return viewCount;
  }


  public void setViewCount(String viewCount) {
    this.viewCount = viewCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelStatistics channelStatistics = (ChannelStatistics) o;
    return Objects.equals(this.commentCount, channelStatistics.commentCount) &&
        Objects.equals(this.hiddenSubscriberCount, channelStatistics.hiddenSubscriberCount) &&
        Objects.equals(this.subscriberCount, channelStatistics.subscriberCount) &&
        Objects.equals(this.videoCount, channelStatistics.videoCount) &&
        Objects.equals(this.viewCount, channelStatistics.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentCount, hiddenSubscriberCount, subscriberCount, videoCount, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelStatistics {\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    hiddenSubscriberCount: ").append(toIndentedString(hiddenSubscriberCount)).append("\n");
    sb.append("    subscriberCount: ").append(toIndentedString(subscriberCount)).append("\n");
    sb.append("    videoCount: ").append(toIndentedString(videoCount)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.DependencyUtil;
import org.openapitools.client.model.VideoListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosApi {
    private ApiClient localVarApiClient;

    public VideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for youtubeVideosList
     * @param part The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part&#x3D;snippet*, the API response will contain all of those properties. (required)
     * @param chart Return the videos that are in the specified chart. (optional)
     * @param hl Stands for \&quot;host language\&quot;. Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX). (optional)
     * @param id Return videos with the given ids. (optional)
     * @param locale  (optional)
     * @param maxHeight  (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param maxWidth Return the player with maximum height specified in (optional)
     * @param myRating Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param regionCode Use a chart that is specific to the specified region (optional)
     * @param videoCategoryId Use chart that is specific to the specified video category (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideosListCall(List<String> part, String chart, String hl, List<String> id, String locale, Integer maxHeight, Integer maxResults, Integer maxWidth, String myRating, String onBehalfOfContentOwner, String pageToken, String regionCode, String videoCategoryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/youtube/v3/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (part != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "part", part));
        }

        if (chart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chart", chart));
        }

        if (hl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hl", hl));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (myRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("myRating", myRating));
        }

        if (onBehalfOfContentOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOfContentOwner", onBehalfOfContentOwner));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (videoCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoCategoryId", videoCategoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Oauth2", "Oauth2c" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideosListValidateBeforeCall(List<String> part, String chart, String hl, List<String> id, String locale, Integer maxHeight, Integer maxResults, Integer maxWidth, String myRating, String onBehalfOfContentOwner, String pageToken, String regionCode, String videoCategoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'part' is set
        if (part == null) {
            throw new ApiException("Missing the required parameter 'part' when calling youtubeVideosList(Async)");
        }
        
        // Check dependency: OnlyOne(chart, id, myRating);
        if(DependencyUtil.doNotSatisfyOnlyOneDependency((chart != null),(id != null && !id.isEmpty()),(myRating != null))){
            throw new ApiException("Dependency not satisfied: OnlyOne(chart, id, myRating);");
        }
        // Check dependency: ZeroOrOne(maxResults, id);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((maxResults != null),(id != null && !id.isEmpty()))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(maxResults, id);");
        }
        // Check dependency: ZeroOrOne(pageToken, id);
        if(DependencyUtil.doNotSatisfyZeroOrOneDependency((pageToken != null),(id != null && !id.isEmpty()))){
            throw new ApiException("Dependency not satisfied: ZeroOrOne(pageToken, id);");
        }
        // Check dependency: IF regionCode THEN chart;
        if(!(!(regionCode != null) || (chart != null))){
            throw new ApiException("Dependency not satisfied: IF regionCode THEN chart;");
        }
        // Check dependency: IF videoCategoryId THEN chart;
        if(!(!(videoCategoryId != null) || (chart != null))){
            throw new ApiException("Dependency not satisfied: IF videoCategoryId THEN chart;");
        }

        okhttp3.Call localVarCall = youtubeVideosListCall(part, chart, hl, id, locale, maxHeight, maxResults, maxWidth, myRating, onBehalfOfContentOwner, pageToken, regionCode, videoCategoryId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a list of resources, possibly filtered.
     * @param part The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part&#x3D;snippet*, the API response will contain all of those properties. (required)
     * @param chart Return the videos that are in the specified chart. (optional)
     * @param hl Stands for \&quot;host language\&quot;. Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX). (optional)
     * @param id Return videos with the given ids. (optional)
     * @param locale  (optional)
     * @param maxHeight  (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param maxWidth Return the player with maximum height specified in (optional)
     * @param myRating Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param regionCode Use a chart that is specific to the specified region (optional)
     * @param videoCategoryId Use chart that is specific to the specified video category (optional)
     * @return VideoListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public VideoListResponse youtubeVideosList(List<String> part, String chart, String hl, List<String> id, String locale, Integer maxHeight, Integer maxResults, Integer maxWidth, String myRating, String onBehalfOfContentOwner, String pageToken, String regionCode, String videoCategoryId) throws ApiException {
        ApiResponse<VideoListResponse> localVarResp = youtubeVideosListWithHttpInfo(part, chart, hl, id, locale, maxHeight, maxResults, maxWidth, myRating, onBehalfOfContentOwner, pageToken, regionCode, videoCategoryId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of resources, possibly filtered.
     * @param part The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part&#x3D;snippet*, the API response will contain all of those properties. (required)
     * @param chart Return the videos that are in the specified chart. (optional)
     * @param hl Stands for \&quot;host language\&quot;. Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX). (optional)
     * @param id Return videos with the given ids. (optional)
     * @param locale  (optional)
     * @param maxHeight  (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param maxWidth Return the player with maximum height specified in (optional)
     * @param myRating Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param regionCode Use a chart that is specific to the specified region (optional)
     * @param videoCategoryId Use chart that is specific to the specified video category (optional)
     * @return ApiResponse&lt;VideoListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoListResponse> youtubeVideosListWithHttpInfo(List<String> part, String chart, String hl, List<String> id, String locale, Integer maxHeight, Integer maxResults, Integer maxWidth, String myRating, String onBehalfOfContentOwner, String pageToken, String regionCode, String videoCategoryId) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideosListValidateBeforeCall(part, chart, hl, id, locale, maxHeight, maxResults, maxWidth, myRating, onBehalfOfContentOwner, pageToken, regionCode, videoCategoryId, null);
        Type localVarReturnType = new TypeToken<VideoListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of resources, possibly filtered.
     * @param part The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part&#x3D;snippet*, the API response will contain all of those properties. (required)
     * @param chart Return the videos that are in the specified chart. (optional)
     * @param hl Stands for \&quot;host language\&quot;. Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX). (optional)
     * @param id Return videos with the given ids. (optional)
     * @param locale  (optional)
     * @param maxHeight  (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param maxWidth Return the player with maximum height specified in (optional)
     * @param myRating Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter. (optional)
     * @param regionCode Use a chart that is specific to the specified region (optional)
     * @param videoCategoryId Use chart that is specific to the specified video category (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideosListAsync(List<String> part, String chart, String hl, List<String> id, String locale, Integer maxHeight, Integer maxResults, Integer maxWidth, String myRating, String onBehalfOfContentOwner, String pageToken, String regionCode, String videoCategoryId, final ApiCallback<VideoListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideosListValidateBeforeCall(part, chart, hl, id, locale, maxHeight, maxResults, maxWidth, myRating, onBehalfOfContentOwner, pageToken, regionCode, videoCategoryId, _callback);
        Type localVarReturnType = new TypeToken<VideoListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

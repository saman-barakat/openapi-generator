/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ChannelProfileDetails;

/**
 * LiveChatBanSnippet
 */
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class LiveChatBanSnippet {
  public static final String SERIALIZED_NAME_BAN_DURATION_SECONDS = "banDurationSeconds";
  @SerializedName(SERIALIZED_NAME_BAN_DURATION_SECONDS)
  private String banDurationSeconds;

  public static final String SERIALIZED_NAME_BANNED_USER_DETAILS = "bannedUserDetails";
  @SerializedName(SERIALIZED_NAME_BANNED_USER_DETAILS)
  private ChannelProfileDetails bannedUserDetails;

  public static final String SERIALIZED_NAME_LIVE_CHAT_ID = "liveChatId";
  @SerializedName(SERIALIZED_NAME_LIVE_CHAT_ID)
  private String liveChatId;

  /**
   * The type of ban.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LIVECHATBANTYPEUNSPECIFIED("liveChatBanTypeUnspecified"),
    
    PERMANENT("permanent"),
    
    TEMPORARY("temporary");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  public LiveChatBanSnippet banDurationSeconds(String banDurationSeconds) {
    
    this.banDurationSeconds = banDurationSeconds;
    return this;
  }

   /**
   * The duration of a ban, only filled if the ban has type TEMPORARY.
   * @return banDurationSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration of a ban, only filled if the ban has type TEMPORARY.")

  public String getBanDurationSeconds() {
    return banDurationSeconds;
  }


  public void setBanDurationSeconds(String banDurationSeconds) {
    this.banDurationSeconds = banDurationSeconds;
  }


  public LiveChatBanSnippet bannedUserDetails(ChannelProfileDetails bannedUserDetails) {
    
    this.bannedUserDetails = bannedUserDetails;
    return this;
  }

   /**
   * Get bannedUserDetails
   * @return bannedUserDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChannelProfileDetails getBannedUserDetails() {
    return bannedUserDetails;
  }


  public void setBannedUserDetails(ChannelProfileDetails bannedUserDetails) {
    this.bannedUserDetails = bannedUserDetails;
  }


  public LiveChatBanSnippet liveChatId(String liveChatId) {
    
    this.liveChatId = liveChatId;
    return this;
  }

   /**
   * The chat this ban is pertinent to.
   * @return liveChatId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The chat this ban is pertinent to.")

  public String getLiveChatId() {
    return liveChatId;
  }


  public void setLiveChatId(String liveChatId) {
    this.liveChatId = liveChatId;
  }


  public LiveChatBanSnippet type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of ban.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of ban.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveChatBanSnippet liveChatBanSnippet = (LiveChatBanSnippet) o;
    return Objects.equals(this.banDurationSeconds, liveChatBanSnippet.banDurationSeconds) &&
        Objects.equals(this.bannedUserDetails, liveChatBanSnippet.bannedUserDetails) &&
        Objects.equals(this.liveChatId, liveChatBanSnippet.liveChatId) &&
        Objects.equals(this.type, liveChatBanSnippet.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(banDurationSeconds, bannedUserDetails, liveChatId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveChatBanSnippet {\n");
    sb.append("    banDurationSeconds: ").append(toIndentedString(banDurationSeconds)).append("\n");
    sb.append("    bannedUserDetails: ").append(toIndentedString(bannedUserDetails)).append("\n");
    sb.append("    liveChatId: ").append(toIndentedString(liveChatId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


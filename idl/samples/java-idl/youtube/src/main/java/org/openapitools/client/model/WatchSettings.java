/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Branding properties for the watch. All deprecated.
 */
@ApiModel(description = "Branding properties for the watch. All deprecated.")
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class WatchSettings {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_FEATURED_PLAYLIST_ID = "featuredPlaylistId";
  @SerializedName(SERIALIZED_NAME_FEATURED_PLAYLIST_ID)
  private String featuredPlaylistId;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "textColor";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor;


  public WatchSettings backgroundColor(String backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * The text color for the video watch page&#39;s branded area.
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The text color for the video watch page's branded area.")

  public String getBackgroundColor() {
    return backgroundColor;
  }


  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public WatchSettings featuredPlaylistId(String featuredPlaylistId) {
    
    this.featuredPlaylistId = featuredPlaylistId;
    return this;
  }

   /**
   * An ID that uniquely identifies a playlist that displays next to the video player.
   * @return featuredPlaylistId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An ID that uniquely identifies a playlist that displays next to the video player.")

  public String getFeaturedPlaylistId() {
    return featuredPlaylistId;
  }


  public void setFeaturedPlaylistId(String featuredPlaylistId) {
    this.featuredPlaylistId = featuredPlaylistId;
  }


  public WatchSettings textColor(String textColor) {
    
    this.textColor = textColor;
    return this;
  }

   /**
   * The background color for the video watch page&#39;s branded area.
   * @return textColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The background color for the video watch page's branded area.")

  public String getTextColor() {
    return textColor;
  }


  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchSettings watchSettings = (WatchSettings) o;
    return Objects.equals(this.backgroundColor, watchSettings.backgroundColor) &&
        Objects.equals(this.featuredPlaylistId, watchSettings.featuredPlaylistId) &&
        Objects.equals(this.textColor, watchSettings.textColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, featuredPlaylistId, textColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchSettings {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    featuredPlaylistId: ").append(toIndentedString(featuredPlaylistId)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.LiveStreamConfigurationIssue;

/**
 * LiveStreamHealthStatus
 */
@javax.annotation.Generated(value = "com.us.idl.javaidl.JavaIDLCodegen", date = "2021-08-24T20:55:04.712703200+02:00[Europe/Paris]")
public class LiveStreamHealthStatus {
  public static final String SERIALIZED_NAME_CONFIGURATION_ISSUES = "configurationIssues";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ISSUES)
  private List<LiveStreamConfigurationIssue> configurationIssues = null;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME_SECONDS = "lastUpdateTimeSeconds";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME_SECONDS)
  private String lastUpdateTimeSeconds;

  /**
   * The status code of this stream
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    GOOD("good"),
    
    OK("ok"),
    
    BAD("bad"),
    
    NODATA("noData"),
    
    REVOKED("revoked");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;


  public LiveStreamHealthStatus configurationIssues(List<LiveStreamConfigurationIssue> configurationIssues) {
    
    this.configurationIssues = configurationIssues;
    return this;
  }

  public LiveStreamHealthStatus addConfigurationIssuesItem(LiveStreamConfigurationIssue configurationIssuesItem) {
    if (this.configurationIssues == null) {
      this.configurationIssues = new ArrayList<LiveStreamConfigurationIssue>();
    }
    this.configurationIssues.add(configurationIssuesItem);
    return this;
  }

   /**
   * The configurations issues on this stream
   * @return configurationIssues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The configurations issues on this stream")

  public List<LiveStreamConfigurationIssue> getConfigurationIssues() {
    return configurationIssues;
  }


  public void setConfigurationIssues(List<LiveStreamConfigurationIssue> configurationIssues) {
    this.configurationIssues = configurationIssues;
  }


  public LiveStreamHealthStatus lastUpdateTimeSeconds(String lastUpdateTimeSeconds) {
    
    this.lastUpdateTimeSeconds = lastUpdateTimeSeconds;
    return this;
  }

   /**
   * The last time this status was updated (in seconds)
   * @return lastUpdateTimeSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last time this status was updated (in seconds)")

  public String getLastUpdateTimeSeconds() {
    return lastUpdateTimeSeconds;
  }


  public void setLastUpdateTimeSeconds(String lastUpdateTimeSeconds) {
    this.lastUpdateTimeSeconds = lastUpdateTimeSeconds;
  }


  public LiveStreamHealthStatus status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status code of this stream
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status code of this stream")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamHealthStatus liveStreamHealthStatus = (LiveStreamHealthStatus) o;
    return Objects.equals(this.configurationIssues, liveStreamHealthStatus.configurationIssues) &&
        Objects.equals(this.lastUpdateTimeSeconds, liveStreamHealthStatus.lastUpdateTimeSeconds) &&
        Objects.equals(this.status, liveStreamHealthStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationIssues, lastUpdateTimeSeconds, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamHealthStatus {\n");
    sb.append("    configurationIssues: ").append(toIndentedString(configurationIssues)).append("\n");
    sb.append("    lastUpdateTimeSeconds: ").append(toIndentedString(lastUpdateTimeSeconds)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

